// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flag.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FlagRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlagRequest) Reset()         { *m = FlagRequest{} }
func (m *FlagRequest) String() string { return proto.CompactTextString(m) }
func (*FlagRequest) ProtoMessage()    {}
func (*FlagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01fdf51d06af45bb, []int{0}
}

func (m *FlagRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlagRequest.Unmarshal(m, b)
}
func (m *FlagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlagRequest.Marshal(b, m, deterministic)
}
func (m *FlagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlagRequest.Merge(m, src)
}
func (m *FlagRequest) XXX_Size() int {
	return xxx_messageInfo_FlagRequest.Size(m)
}
func (m *FlagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlagRequest proto.InternalMessageInfo

func (m *FlagRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type FlagResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlagResponse) Reset()         { *m = FlagResponse{} }
func (m *FlagResponse) String() string { return proto.CompactTextString(m) }
func (*FlagResponse) ProtoMessage()    {}
func (*FlagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01fdf51d06af45bb, []int{1}
}

func (m *FlagResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlagResponse.Unmarshal(m, b)
}
func (m *FlagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlagResponse.Marshal(b, m, deterministic)
}
func (m *FlagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlagResponse.Merge(m, src)
}
func (m *FlagResponse) XXX_Size() int {
	return xxx_messageInfo_FlagResponse.Size(m)
}
func (m *FlagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlagResponse proto.InternalMessageInfo

func (m *FlagResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func init() {
	proto.RegisterType((*FlagRequest)(nil), "proto.FlagRequest")
	proto.RegisterType((*FlagResponse)(nil), "proto.FlagResponse")
}

func init() { proto.RegisterFile("flag.proto", fileDescriptor_01fdf51d06af45bb) }

var fileDescriptor_01fdf51d06af45bb = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xcb, 0x49, 0x4c,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0x3c, 0xc9, 0xf9, 0xb9, 0xb9,
	0xf9, 0x79, 0x10, 0x41, 0x25, 0x79, 0x2e, 0x6e, 0xb7, 0x9c, 0xc4, 0xf4, 0xa0, 0xd4, 0xc2, 0xd2,
	0xd4, 0xe2, 0x12, 0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4, 0x4a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x10, 0x53, 0x49, 0x85, 0x8b, 0x07, 0xa2, 0xa0, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48,
	0x84, 0x8b, 0xb5, 0x2c, 0x31, 0xa7, 0x34, 0x15, 0xac, 0x86, 0x23, 0x08, 0xc2, 0x31, 0x4a, 0xe7,
	0x62, 0x01, 0xa9, 0x12, 0x32, 0xe2, 0x62, 0x07, 0xd1, 0xee, 0xa9, 0x25, 0x42, 0x42, 0x10, 0x1b,
	0xf4, 0x90, 0x8c, 0x97, 0x12, 0x46, 0x11, 0x83, 0x9a, 0xa8, 0x0d, 0xd1, 0x13, 0x8c, 0x43, 0x0f,
	0x0f, 0x54, 0xcc, 0x35, 0xb7, 0xa0, 0xa4, 0x32, 0x89, 0x0d, 0xcc, 0x31, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x40, 0xf9, 0xb9, 0x20, 0xd9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlagClient is the client API for Flag service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlagClient interface {
	FlagGet(ctx context.Context, in *FlagRequest, opts ...grpc.CallOption) (*FlagResponse, error)
	FlagSet(ctx context.Context, in *FlagRequest, opts ...grpc.CallOption) (*Empty, error)
}

type flagClient struct {
	cc *grpc.ClientConn
}

func NewFlagClient(cc *grpc.ClientConn) FlagClient {
	return &flagClient{cc}
}

func (c *flagClient) FlagGet(ctx context.Context, in *FlagRequest, opts ...grpc.CallOption) (*FlagResponse, error) {
	out := new(FlagResponse)
	err := c.cc.Invoke(ctx, "/proto.Flag/FlagGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flagClient) FlagSet(ctx context.Context, in *FlagRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Flag/FlagSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlagServer is the server API for Flag service.
type FlagServer interface {
	FlagGet(context.Context, *FlagRequest) (*FlagResponse, error)
	FlagSet(context.Context, *FlagRequest) (*Empty, error)
}

func RegisterFlagServer(s *grpc.Server, srv FlagServer) {
	s.RegisterService(&_Flag_serviceDesc, srv)
}

func _Flag_FlagGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagServer).FlagGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Flag/FlagGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagServer).FlagGet(ctx, req.(*FlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flag_FlagSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagServer).FlagSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Flag/FlagSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagServer).FlagSet(ctx, req.(*FlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Flag_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Flag",
	HandlerType: (*FlagServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FlagGet",
			Handler:    _Flag_FlagGet_Handler,
		},
		{
			MethodName: "FlagSet",
			Handler:    _Flag_FlagSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flag.proto",
}
